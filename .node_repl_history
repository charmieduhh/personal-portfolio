use products database
node seeds.js
nodemon app.js
mongo
db.product.find()
show collections
use farmStead
show db
show dbs
use farmStand
const Product = require('./models/product')
.load seeds.js
node seeds.js
vanessa.save().then(p => console.log(p))
const vanessa = new Person({first: 'vanessa', last: 'garcia'})
                                    const Person = mongoose.model('Person', personSchema);
                                    })
                                    console.log('JUST SAVED!')
                                personSchema.post('save', async function () {
                                })
                                console.log('ABOUT TO SAVE!')
                            this.last = 'MAMA'; //will always save first/last name as YO MAMA
                        this.first = 'YO';
                    personSchema.pre('save', async function () { //allows you to update 
                    //add variables through mongoose terminal
                    }) //property doesn't exist in db, but only on mongoose side of things in JS 
                    return `${this.first} ${this.last}` //this = indiv person
                personSchema.virtual('fullName').get(function () { //gets fullName w space in between
                })
                last: String
            first: String,
        const personSchema = new mongoose.Schema({
        }
        console.log('CONNECTION OPEN!!')
    await mongoose.connect('mongodb://localhost:27017/shopApp'); //can add any title after local host
async function main() {
main().catch(err => console.log(err));
const mongoose = require('mongoose');
.load person.js
kiana.save().then(p => console.log(p))
kiana
const kiana = new Person({first: 'kiana', last: 'mopera'})
                            const Person = mongoose.model('Person', personSchema);
                            })
                            console.log('JUST SAVED!')
                        personSchema.post('save', async function () {
                        })
                        console.log('ABOUT TO SAVE!')
                    personSchema.pre('save', async function () { //allows you to update 
                    //add variables through mongoose terminal
                    }) //property doesn't exist in db, but only on mongoose side of things in JS 
                    return `${this.first} ${this.last}` //this = indiv person
                personSchema.virtual('fullName').get(function () { //gets fullName w space in between
                })
                last: String
            first: String,
        const personSchema = new mongoose.Schema({
        }
        console.log('CONNECTION OPEN!!')
    await mongoose.connect('mongodb://localhost:27017/shopApp'); //can add any title after local host
async function main() {
main().catch(err => console.log(err));
const mongoose = require('mongoose');
.load person.js
k.save()
const k = new Person({first: 'Zaila', last: 'Bawitlung'})
                            const Person = mongoose.model('Person', personSchema);
                            })
                            console.log('JUST SAVED!')
                        personSchema.post('save', async function () {
                        })
                        console.log('ABOUT OT SAVE!')
                    personSchema.pre('save', async function () { //allows you to update 
                    //add variables through mongoose terminal
                    }) //property doesn't exist in db, but only on mongoose side of things in JS 
                    return `${this.first} ${this.last}` //this = indiv person
                personSchema.virtual('fullName').get(function () { //gets fullName w space in between
                })
                last: String
            first: String,
        const personSchema = new mongoose.Schema({
        }
        console.log('CONNECTION OPEN!!')
    await mongoose.connect('mongodb://localhost:27017/shopApp'); //can add any title after local host
async function main() {
main().catch(err => console.log(err));
const mongoose = require('mongoose');
.load person.js
.touch person.js
node person.js
charmie
 const charmie = new Person({first: 'charmie', last: 'dubongco'})
charmie
charmie.fullName
const charmie = new Product({first: 'charmie', last: 'dubongco'})
charmie.fullName
db.people.find()
db
                    const Person = mongoose.model('Person', personSchema);
                    })
                    return `${this.first} ${this.last}` //this = indiv person
                personSchema.virtual('fullName').get(function () { //gets fullName w space in between
                })
                last: String
            first: String,
        const personSchema = new mongoose.Schema({
        }
        console.log('CONNECTION OPEN!!')
    await mongoose.connect('mongodb://localhost:27017/shopApp'); //can add any title after local host
async function main() {
main().catch(err => console.log(err));
const mongoose = require('mongoose');
.load person.js
use shopApp
                    const Person = mongoose.model('Person', personSchema);
                    })
                    return `${this.first} ${this.last}` //this = indiv person
                personSchema.virtual('fullName').get(function () { //gets fullName w space in between
                })
                last: String
            first: String,
        const personSchema = new mongoose.Schema({
        }
        console.log('CONNECTION OPEN!!')
    await mongoose.connect('mongodb://localhost:27017/shopApp'); //can add any title after local host
async function main() {
main().catch(err => console.log(err));
const mongoose = require('mongoose');
.load person.js
use movieApp
show collections
Person.find()
People.find()
db.people.find()
                    const Person = mongoose.model('Person', personSchema);
                    })
                    return `${this.first} ${this.last}` //this = indiv person
                personSchema.virtual('fullName').get(function () { //gets fullName w space in between
                })
                last: String
            first: String,
        const personSchema = new mongoose.Schema({
        }
        console.log('CONNECTION OPEN!!')
    await mongoose.connect('mongodb://localhost:27017/shopApp'); //can add any title after local host
async function main() {
main().catch(err => console.log(err));
const mongoose = require('mongoose');
.load person.js
db.people.find()
charmie.fullName
charmie
const charmie = new Person({first: 'Charmie', last: 'Dubongco'})
                    const Person = mongoose.model('Person', personSchema);
                    })
                    return `${this.first} ${this.last}` //this = indiv person
                personSchema.virtual('fullName').get(function () { //gets fullName w space in between
                })
                last: String
            first: String,
        const personSchema = new mongoose.Schema({
        }
        console.log('CONNECTION OPEN!!')
    await mongoose.connect('mongodb://localhost:27017/shopApp'); //can add any title after local host
async function main() {
main().catch(err => console.log(err));
const mongoose = require('mongoose');
.load person.js
.load personl.js
ls
.load person.js
.touch product.js
ls
use shopApp
p.greet()
p
const p = new Product({name: 'gloves', price: 60})
                                                                                                                                                                                                                                                                                            //})
                                                                                                                                                                                                                                                                                            //    console.log(err) //err.errors.name.properties.message --> gives info on what went wrong
                                                                                                                                                                                                                                                                                            //    console.log('OH NO ERROR!');
                                                                                                                                                                                                                                                                                            //.catch(err => {
                                                                                                                                                                                                                                                                                            //})
                                                                                                                                                                                                                                                                                            //    console.log(data)
                                                                                                                                                                                                                                                                                            //    console.log('IT WORKED!');
                                                                                                                                                                                                                                                                                            //.then (data => {
                                                                                                                                                                                                                                                                                            ////runValidators: confirms validation w/ model's schema (otherwise will ouput price to be -$)
                                                                                                                                                                                                                                                                                            //Product.findOneAndUpdate({name: 'wax'}, { price: 10.99 }, { new: true, runValidators: true }) //new: true --> passes in new data once updated
                                                                                                                                                                                                                                                                                            //})
                                                                                                                                                                                                                                                                                            //    console.log(err) //err.errors.name.properties.message --> gives info on what went wrong
                                                                                                                                                                                                                                                                                            //    console.log('OH NO ERROR!');
                                                                                                                                                                                                                                                                                            //.catch(err => {
                                                                                                                                                                                                                                                                                            //})
                                                                                                                                                                                                                                                                                            //    console.log(data)
                                                                                                                                                                                                                                                                                            //    console.log('IT WORKED!');
                                                                                                                                                                                                                                                                                            //.then (data => {
                                                                                                                                                                                                                                                                                            //snowboard.save()
                                                                                                                                                                                                                                                                                            //const snowboard = new Product({name: 'snow jacket', price: 70.22, categories: ['snowboarding'], qty: {online: {type: 4}, inStore: {type: 3}}, size: 'XS'}); //won't add color to mongo
                                                                                                                                                                                                                                                                                            const Product = mongoose.model('Product', productSchema);
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                            console.log('HELLO! HI! HOWDY!')
                                                                                                                                                                                                                                                                                        productSchema.methods.greet = function() {
                                                                                                                                                                                                                                                                                        })
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                            enum: ['S', 'M', 'L'] //enum: Array, creates a validator that checks if the value is in the given array
                                                                                                                                                                                                                                                                type: String,
                                                                                                                                                                                                                                                    size: {
                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                        default: 0
                                                                                                                                                                                                        type: Number,
                                                                                                                                                                                        inStore: {
                                                                                                                                                                            },
                                                                                                                                                                default: 0
                                                                                                                                                type: Number,
                                                                                                                                online: {
                                                                                                                    qty: {
                                                                                                            type: [String], //means it's an array only consisting of strings
                                                                                                    catgories: {
                                                                                                },
                                                                                            default: false //default: any or function, sets a default value for the path. if the value is a function, the return value function is used as the default
                                                                                    type: Boolean,
                                                                            onSale: {
                                                                        },
                                                                    min: [0, 'Price must be positive doofus'] //'error message'
                                                            required: true, //required: boolean or function, if true adds a required validator for this property
                                                    type: Number,
                                            price: {
                                        },
                                    maxLength: 20 //Number, creates a validator that checks if the value length is not greater than the given number
                            required: true, //default is typ false
                    type: String,
            name: {
        const productSchema = new mongoose.Schema({
        }
        console.log('CONNECTION OPEN!!')
    await mongoose.connect('mongodb://localhost:27017/shopApp'); //can add any title after local host
async function main() {
main().catch(err => console.log(err));
const mongoose = require('mongoose');
.load product.js
Movie.findOneAndDelete({title: 'Alien'}).then(m => console.log(m))
Movie.deleteMany({year: {$lte: 1999}}).then(msg => console.log(msg))
Movie.remove({title: 'Amelie'}).then(msg => console.log(msg))
Movie.findOneAndUpdate({title: 'The Iron Giant'}, {score: 7.8}, {new: true}).then(m => console.log(m))
Movie.findOneAndUpdate({title: 'The Iron Giant'}, {score: 7}).then(m => console.log(m))
Movie.updateMany({title: {$in: ['This is 40','Stand by Me']}}, {score: 10}).then(res => console.log(res))
Movie.updateOne({title: 'This is 40'}, {year: 2012}).then(res => console.log(res))
Movie.updateOne({title: 'This is 40')}, {year: 2012}).then(res => console.log(res))
Movie.updateOne({title: 'This is 40'}, {year: 2012}).then(res => console.log(res))
Movie.findById('6358bdaf1380bc42f4126ec8').then(data => console.log(data))
Movie.findById('6358bdaf1380bc42f4126ec8').then(m => console.log(m))
Movie.find({year: {$lte: 1990}}).then(data => console.log(data))
Movie.find({rating: 'PG-13'}).then(data => console.log(data))
> Movie({rating:'PG-13'}).then(data =>console.log(data))
> Movie({rating: 'PG-13'}).then(data =>console.log(data))
Movie({rating: 'PG-13'}).then(data =>consol.log(data))
Movie.find({}).then(data => console.log(data))
)
Movie.find({}
Movie.find({})
                                                    //to select db on mongo: show dbs--> use movieApp --> show collections ---> db.movies.find()
                                                    })
                                                    console.log(data);
                                                console.log('IT WORKED!');
                                            .then(data => {
                                            ])
                                            { title: 'Moonrise Kingdom', year: 2012, score: 7.3, rating: 'PG-13'}
                                        { title: 'Stand by Me', year: 1986, score: 8.6, rating: 'R'},
                                    { title: 'The Iron Giant', year: 1999, score: 7.5, rating: 'PG'},
                                { title: 'Alien', year: 1979, score: 8.1, rating: 'R'},
                            { title: 'Amelie', year: 2001, score: 8.3, rating: 'R'},
                        Movie.insertMany([ //to insert more movies under mongoose model 
                        //to access mongo, type mongo under "mongooseBasics" to access db commands
                        //before saving to db, go to db first (use movieApp-->db.movies.find()-->thisIsForty.save())
                        //can edit key:value pairs in node by typing in thisIs40.score = 9.5 --> thisIsForty.save()
                        //node--> .load index.js --> thisIsForty --> thisIsForty.save() to save under db 
                        //const thisIsForty = new Movie({title: 'This is 40', year: 2014, score: 9.2, rating: 'R'})
                        const Movie = mongoose.model('Movie', movieSchema) //mongoose automatically makes collection of 'movies' from 'Movie'
                        //modelName must be singular + capitalized
                        //To use our schema definition, we need to convert our blogSchema into a Model we can work with. To do so, we pass it into mongoose.model(modelName, schema):
                        });
                        rating: String
                    score: Number,
                year: Number,
            title: String,
        const movieSchema = new mongoose.Schema({ 
        }
        console.log('CONNECTION OPEN!!')
    await mongoose.connect('mongodb://localhost:27017/movieApp'); //can add any title after local host
async function main() {
main().catch(err => console.log(err));
const mongoose = require('mongoose');
.load index.js
Movie.find({})
Movie.find()
db.movies.find()
mongoose
db.movies.find()
thisIsForty.save()
thisIsForty.score = 9.5
thisIsForty
                        const thisIsForty = new Movie({title: 'This is 40', year: 2014, score: 9.2, rating: 'R'})
                        const Movie = mongoose.model('Movie', movieSchema) //mongoose automatically makes collection of 'movies' from 'Movie'
                        //modelName must be singular + capitalized
                        //To use our schema definition, we need to convert our blogSchema into a Model we can work with. To do so, we pass it into mongoose.model(modelName, schema):
                        });
                        rating: String
                    score: Number,
                year: Number,
            title: String,
        const movieSchema = new mongoose.Schema({ 
        }
        console.log('CONNECTION OPEN!!')
    await mongoose.connect('mongodb://localhost:27017/movieApp'); //can add any title after local host
async function main() {
main().catch(err => console.log(err));
const mongoose = require('mongoose');
.load index.js
cd
ls
node index.js
.load index.js
mongo
show dbs
use movieApp
thisIsForty.save()
use movieApp
thisIsForty
                        const thisIsForty = new Movie({title: 'This is 40', year: 2014, score: 9.2, rating: 'R'})
                        const Movie = mongoose.model('Movie', movieSchema) //mongoose automatically makes collection of 'movies' from 'Movie'
                        //modelName must be singular + capitalized
                        //To use our schema definition, we need to convert our blogSchema into a Model we can work with. To do so, we pass it into mongoose.model(modelName, schema):
                        });
                        rating: String
                    score: Number,
                year: Number,
            title: String,
        const movieSchema = new mongoose.Schema({ 
        }
        console.log('CONNECTION OPEN!!')
    await mongoose.connect('mongodb://localhost:27017/movieApp'); //can add any title after local host
async function main() {
main().catch(err => console.log(err));
const mongoose = require('mongoose');
.load index.js
use movieApp
db.movies.find()
thisIsForty.save()
thisIsForty
                        const thisIsForty = new Movie({title: 'This is 40', year: 2014, score: 9.2, rating: 'R'})
                        const Movie = mongoose.model('Movie', movieSchema) //mongoose automatically makes collection of 'movies' from 'Movie'
                        //modelName must be singular + capitalized
                        //To use our schema definition, we need to convert our blogSchema into a Model we can work with. To do so, we pass it into mongoose.model(modelName, schema):
                        });
                        rating: String
                    score: Number,
                year: Number,
            title: String,
        const movieSchema = new mongoose.Schema({ 
        }
        console.log('CONNECTION OPEN!!')
    await mongoose.connect('mongodb://localhost:27017/movieApp'); //can add any title after local host
async function main() {
main().catch(err => console.log(err));
const mongoose = require('mongoose');
.load index.js
thisIsForty
                        const thisIsForty = new Movie({title: 'This is 40', year: 2014, score: 9.2, rating: 'R'})
                        const Movie = mongoose.model('Movie', movieSchema) //mongoose automatically makes collection of 'movies' from 'Movie'
                        //modelName must be singular + capitalized
                        //To use our schema definition, we need to convert our blogSchema into a Model we can work with. To do so, we pass it into mongoose.model(modelName, schema):
                        });
                        rating: String
                    score: Number,
                year: Number,
            title: String,
        const movieSchema = new mongoose.Schema({ 
        }
        console.log('CONNECTION OPEN!!')
    await mongoose.connect('mongodb://localhost:27017/movieApp'); //can add any title after local host
async function main() {
main().catch(err => console.log(err));
const mongoose = require('mongoose');
.load index.js
node
thisIsForty
amadeus
                        const amadeus = new Movie({title: 'This is 40', year: 2014, score: 9.2, rating: 'R'})
                        const Movie = mongoose.model('Movie', movieSchema) //mongoose automatically makes collection of 'movies' from 'Movie'
                        //modelName must be singular + capitalized
                        //To use our schema definition, we need to convert our blogSchema into a Model we can work with. To do so, we pass it into mongoose.model(modelName, schema):
                        });
                        rating: String
                    score: Number,
                year: Number,
            title: String,
        const movieSchema = new mongoose.Schema({ 
        }
        console.log('CONNECTION OPEN!!')
    await mongoose.connect('mongodb://localhost:27017/movieApp'); //can add any title after local host
async function main() {
main().catch(err => console.log(err));
const mongoose = require('mongoose');
.load index.js
ls
node
cd
ls
node index.js
amadeus
thisIsForty
                        const thisIsForty = new Movie({title: 'This is 40', year: 2014, score: 9.2, rating: 'R'})
                        const Movie = mongoose.model('Movie', movieSchema) //mongoose automatically makes collection of 'movies' from 'Movie'
                        //modelName must be singular + capitalized
                        //To use our schema definition, we need to convert our blogSchema into a Model we can work with. To do so, we pass it into mongoose.model(modelName, schema):
                        });
                        rating: String
                    score: Number,
                year: Number,
            title: String,
        const movieSchema = new Schema({ 
        }
        console.log('CONNECTION OPEN!!')
    await mongoose.connect('mongodb://localhost:27017/movieApp'); //can add any title after local host
async function main() {
main().catch(err => console.log(err));
const mongoose = require('mongoose');
.load index.jsie({title: 'This is 40', year: 2014, score: 9.2, rating: 'R'})
                        const Movie = mongoose.model('Movie', movieSchema) //mongoose automatically makes collection of 'movies' from 'Movie'
                        //modelName must be singular + capitalized
                        //To use our schema definition, we need to convert our blogSchema into a Model we can work with. To do so, we pass it into mongoose.model(modelName, schema):
                        });
                        rating: String
                    score: Number,
                year: Number,
            title: String,
        const movieSchema = new Schema({ 
        }
        console.log('CONNECTION OPEN!!')
    await mongoose.connect('mongodb://localhost:27017/movieApp'); //can add any title after local host
async function main() {
main().catch(err => console.log(err));
const mongoose = require('mongoose');
.load index.js